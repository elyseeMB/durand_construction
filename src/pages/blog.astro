---
import { getEntry, getEntries } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { Image, Picture } from "astro:assets";
import { getCollection } from "astro:content";
import { date } from "astro:schema";
import { ViewProjets } from "../components/ViewProjets.tsx";
import BottomPage from "../components/blocks/BottomPage.astro";
import Heading from "../components/Heading.astro";
import type { CollectionEntry } from "astro:content";

type PropsData = {
  taxonomy: string;
  posts: CollectionEntry<"blog">[];
};

type Props = {
  data: PropsData[];
};

type Post = CollectionEntry<"blog">;

interface PostsByYearType {
  [key: string]: Post[];
}

const taxonomies = await getCollection("taxonomies");
const posts = await getCollection("blog");

function getPostsByTaxonomy(id: string) {
  return posts.filter((post) => post.data.taxonomies?.some((t) => t.id === id));
}

// Fonction pour regrouper les posts par année
function groupPostsByYear(posts: Post[]): PostsByYearType {
  const postsByYear: PostsByYearType = {};

  posts.forEach((post) => {
    if (!post.data.pubDate) return;

    const date = new Date(post.data.pubDate);
    const year = date.getFullYear();

    if (!postsByYear[year]) {
      postsByYear[year] = [];
    }

    postsByYear[year].push(post);
  });

  // Trier les posts de chaque année (du plus récent au plus ancien)
  Object.keys(postsByYear).forEach((year) => {
    postsByYear[year].sort((a, b) => {
      if (!a.data.pubDate) return 1;
      if (!b.data.pubDate) return -1;

      return (
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
      );
    });
  });

  return postsByYear;
}

// Récupérer les taxonomies avec leurs posts
const taxonomiesWithPosts = taxonomies.map((taxonomy) => {
  const taxonomyPosts = getPostsByTaxonomy(taxonomy.id);

  return {
    taxonomy: taxonomy.data.name,
    id: taxonomy.id,
    posts: taxonomyPosts,
    postsByYear: groupPostsByYear(taxonomyPosts),
    // Obtenir les années triées (plus récent d'abord)
    years: Object.keys(groupPostsByYear(taxonomyPosts)).sort((a, b) => b - a),
  };
});

// Créer également une version avec tous les posts groupés par année
const allPostsByYear = groupPostsByYear(posts);
const allYears = Object.keys(allPostsByYear).sort((a, b) => b - a);

// Filtrer les taxonomies qui ont au moins un post
const onlyTaxonomyWithPosts = taxonomiesWithPosts.filter(
  (tax) => tax.posts.length > 0
);

const seo = {
  title: "Blog – Conseils & Actualités",
  description:
    "Entre idées, chantiers et innovations : suivez notre actualité au cœur de l'architecture et du bâtiment.",
  image: "https://durand-construction.com/og-image.jpg",
  url: Astro.url.href,
};
---

<Layout {...seo}>
  <section>
    <div class="container">
      <Heading
        title="ENTRE IDÉES, CHANTIERS ET INNOVATIONS"
        description="SUIVEZ NOTRE ACTUALITÉ AU CŒUR DE L'ARCHITECTURE ET DU BÂTIMENT"
      />
      <BottomPage
        topic="articles"
        classement="4.0"
        description="nous vous partageons ici l'envers du décor, les tendances qui nous animent et notre approche sur la manière de bâtir intelligemment."
      >
        <!-- Passer les données organisées par taxonomie et par année au composant -->
        <ViewProjets
          client:load
          data={onlyTaxonomyWithPosts}
          allYears={allYears}
          allPostsByYear={allPostsByYear}
        />
      </BottomPage>
    </div>
  </section>
</Layout>
