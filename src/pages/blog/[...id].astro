---
import type { GetStaticPaths } from "astro";
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { strategyToUppercase } from "../../helpers/dom.ts";

interface Props {
  post: CollectionEntry<"blog">;
}

export const getStaticPaths = (async () => {
  const posts = await getCollection("blog", ({ data }) => {
    return import.meta.env.PROD ? data.isDraft !== true : true;
  });
  return posts.map((post) => ({
    params: { id: post.id },
    props: { post },
  }));
}) satisfies GetStaticPaths;

const { post } = Astro.props;

const { Content, headings } = await render(post);

const {
  seo: seoProps,
  slug,
  title,
  summary,
  taxonomies,
  thumbnail,
  author,
} = post.data;

const getTaxonomies = await Promise.all(
  taxonomies
    ? taxonomies?.map(
        async (taxonomy) => await getEntry(taxonomy.collection, taxonomy.id)
      )
    : []
);

const metaData = {
  title: post.data.title,
  description: post.data.summary,
  image: post.data.thumbnail,
  url: Astro.url.href,
};
const seo = seoProps ? seoProps : metaData;
---

<Layout {...seo}>
  <!-- {
      posts.map((post) => (
        <li>
          ecrit par : {author?.data.name}
          <a href={`/blog/${post.id}`}>{post.data.title}</a>
        </li>
      ))
    } -->
  <div class="container">
    <div class="container-narrow">
      <div class="info">
        <h1>{strategyToUppercase(title)}</h1>
        <div class="tags">
          {
            getTaxonomies.map((taxonomy) => (
              <div class="tag"> {taxonomy?.data.name} </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>

  {
    summary && (
      <div class="container">
        <div class="container-narrow description">
          <blockquote>
            <p>{summary}</p>
          </blockquote>
        </div>
      </div>
    )
  }

  <div class="heading">
    <div class="cover">
      <img src={thumbnail} alt="" />
    </div>
  </div>

  <div class="container">
    <div class="container-narrow">
      <div class="content">
        <Content />
      </div>
    </div>
  </div>
</Layout>

<style>
  :root {
    --title-1: 2rem;
    --title-2: 1.7rem;
    --title-3: 1.2rem;
    --paragarph-size: 0.9rem;
    --paragraph-color: var(--accents-7);
    --small-size: 0.8rem;
    --border: var(--accents-2);
  }

  blockquote {
    border-left: 4px solid var(--accents-2);
    padding: 1em 1.5em;
    font-style: italic;
  }

  .heading {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    padding-block: 5rem;

    img {
      width: 100%;
      height: 100%;
      max-height: 300px;
      object-fit: cover;
    }
  }

  .description {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr;
    padding-top: 10rem;
    gap: 3rem;
  }

  .container-narrow .info {
    padding-top: 6rem;
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;

    h1 {
      color: var(--paragraph-color);
      font-size: var(--title-1);
    }
  }

  .container-narrow .tags {
    display: flex;
    align-items: flex-end;
    gap: 0.5rem;

    .tag {
      position: relative;
      display: flex;
      gap: 0.3rem;
      position: relative;
      font-size: 0.7rem;
      background-color: #ffa50075;
      border-radius: 0.4rem;
      display: flex;
      align-items: center;
      padding: 5px 3px;
      width: max-content;

      &::before {
        content: "";
        float: 0;
        display: block;
        width: 7px;
        border-radius: 7px;
        aspect-ratio: 1 / 1;
        background: #fff;
      }
    }
  }

  .container-narrow {
    position: relative;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;

    h2 {
      padding: 0;
      margin: 0;
      color: var(--paragraph-color);
      font-size: var(--title-2);
    }

    h3 {
      padding: 0;
      margin: 0;
      font-size: var(--title-3);
      color: var(--paragraph-color);
      font-weight: 700;
    }

    p {
      color: var(--paragraph-color);
      font-size: var(--paragarph-size);
      line-height: 1.8;
    }

    hr {
      height: 1px;
      background: var(--accents-2);
      margin: 0;
      padding: 0;
      border: none;
    }

    table {
      font-size: var(--paragarph-size);
      display: table;
    }

    table th,
    td,
    tr {
      padding: 1rem;
      border: 1px solid var(--border);
    }

    table thead {
      text-align: left;
      font-weight: 700;
    }

    table td {
      vertical-align: top;
    }
  }

  .container-narrow .content {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    padding-bottom: 5rem;
  }

  .container-narrow .content {
    ul {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1rem;
      padding-left: 50px;
      font-size: var(--paragarph-size);
    }

    ul > * {
      list-style: decimal;
    }

    img {
      max-height: 350px;
      width: 100%;
      height: 100%;
      display: block;
      object-fit: cover;
    }
  }

  @media screen and (max-width: 590px) {
    .container-narrow .info .tags {
      align-items: flex-start;
      flex-direction: column;
    }
  }
</style>
